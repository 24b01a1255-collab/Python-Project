
import csv
import os

CSV_FILE =r"C:\Users\madhu\Downloads\student1.csv"

if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, "w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow([
            "Roll.No", "Name", "Branch", "Year", "Gender", "Age",
            "Attendance_%", "Mid_Marks", "Mid2_Marks", "Quiz_Marks", "Final_Marks"
        ])

def add_student():
    try:
        roll_no = int(input("Enter Roll No: "))
        name = input("Enter Name: ").strip()
        branch = input("Enter Branch: ").strip()
        year = input("Enter Year: ").strip()
        gender = input("Enter Gender (M/F): ").strip().upper()
        age = int(input("Enter Age: "))
        attendance = float(input("Enter Attendance % (0-100): "))
        mid1 = float(input("Enter Mid1 Marks: "))
        mid2 = float(input("Enter Mid2 Marks: "))
        quiz = float(input("Enter Quiz Marks: "))
        final = float(input("Enter Final Marks: "))

        if not (0 <= attendance <= 100):
            print("Attendance must be between 0 and 100")
            return

    
        with open(CSV_FILE, "r") as file:
            reader = csv.DictReader(file)
            for row in reader:
                if int(row["Roll.No"]) == roll_no:
                    print(" Student with this Roll No already exists.")
                    return

        
        with open(CSV_FILE, "a", newline="") as file:
            writer = csv.writer(file)
            writer.writerow([roll_no, name, branch, year, gender, age,
                             attendance, mid1, mid2, quiz, final])
        print(" Student added successfully!")

    except ValueError:
        print(" Please enter valid data (numbers where required).")

def search_student():
    choice = input("Search by (1) Roll.No or (2) Name: ").strip()

    found = False
    with open(CSV_FILE, "r") as file:
        reader = csv.DictReader(file)
        if choice == "1":
            try:
                roll_no = int(input("Enter Roll_No: "))
                for row in reader:
                    if int(row["Roll.No"]) == roll_no:
                        print(" Student Found:")
                        print(row)
                        found = True
                        break
            except ValueError:
                print("Roll_No must be a number.")
                return

        elif choice == "2":
            name_part = input("Enter Name (partial allowed): ").strip().lower()
            for row in reader:
                if name_part in row["Name"].lower():
                    if not found:
                        print("Matches Found:")
                    print(row)
                    found = True
        else:
            print(" Invalid option. Choose 1 or 2.")
            return

    if not found:
        print("No matching record found.")



def update_student():
    try:
        roll_no = int(input("Enter Roll_No of student to update: "))
        students = []

        with open(CSV_FILE, "r") as file:
            reader = csv.DictReader(file)
            for row in reader:
                students.append(row)

        found = False
        for row in students:
            if int(row["Roll.No"]) == roll_no:
                found = True
                print("Current details:")
                for k, v in row.items():
                    print(f"{k}: {v}")

               
                row["Name"] = input(f"Enter Name [{row['Name']}]: ").strip() or row["Name"]
                row["Branch"] = input(f"Enter Branch [{row['Branch']}]: ").strip() or row["Branch"]
                row["Year"] = input(f"Enter Year [{row['Year']}]: ").strip() or row["Year"]
                row["Gender"] = input(f"Enter Gender (M/F) [{row['Gender']}]: ").strip().upper() or row["Gender"]
                row["Age"] = input(f"Enter Age [{row['Age']}]: ").strip() or row["Age"]
                row["Attendance_%"] = input(f"Enter Attendance % [{row['Attendance_%']}]: ").strip() or row["Attendance_%"]
                row["Mid_Marks"] = input(f"Enter Mid1 Marks [{row['Mid_Marks']}]: ").strip() or row["Mid_Marks"]
                row["Mid2_Marks"] = input(f"Enter Mid2 Marks [{row['Mid2_Marks']}]: ").strip() or row["Mid2_Marks"]
                row["Quiz_Marks"] = input(f"Enter Quiz Marks [{row['Quiz_Marks']}]: ").strip() or row["Quiz_Marks"]
                row["Final_Marks"] = input(f"Enter Final Marks [{row['Final_Marks']}]: ").strip() or row["Final_Marks"]
                break

        if not found:
            print("Student with this Roll_No not found.")
            return

  
        with open(CSV_FILE, "w", newline="") as file:
            fieldnames = ["Roll.No", "Name", "Branch", "Year", "Gender", "Age",
                          "Attendance_%", "Mid_Marks", "Mid2_Marks", "Quiz_Marks", "Final_Marks"]
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(students)

        print("Student record updated successfully!")

    except ValueError:
        print("Invalid input. Roll_No and numeric fields must be numbers.")

def delete_student():
    try:
        roll_no = int(input("Enter Roll_No of student to delete: "))
        students = []

        with open(CSV_FILE, "r") as file:
            reader = csv.DictReader(file)
            for row in reader:
                students.append(row)

        found = False
        for row in students:
            if int(row["Roll.No"]) == roll_no:
                found = True
                print("Student found:")
                print(row)
                confirm = input("Are you sure you want to delete this record? (Y/N): ").strip().upper()
                if confirm == "Y":
                    # Optionally move deleted record to students_deleted.csv
                    with open("students_deleted.csv", "a", newline="") as dfile:
                        writer = csv.DictWriter(dfile, fieldnames=row.keys())
                        if dfile.tell() == 0:  # write header if file empty
                            writer.writeheader()
                        writer.writerow(row)

                    students.remove(row)  # remove from main list
                    print("Student record deleted.")
                else:
                    print("Deletion cancelled.")
                break

        if not found:
            print("Student with this Roll_No not found.")
            return
        with open(CSV_FILE, "w", newline="") as file:
            fieldnames = ["Roll.No", "Name", "Branch", "Year", "Gender", "Age",
                          "Attendance_%", "Mid_Marks", "Mid2_Marks", "Quiz_Marks", "Final_Marks"]
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(students)
def generate_report():
    branch = input("Enter Branch: ").strip()
    year = input("Enter Year: ").strip()

    students = []
    with open(CSV_FILE, "r") as file:
        reader = csv.DictReader(file)
        for row in reader:
            if row["Branch"].lower() == branch.lower() and row["Year"] == year:
                try:
                    row["Final_Marks"] = float(row["Final_Marks"])
                except ValueError:
                    row["Final_Marks"] = 0.0
                students.append(row)

    if not students:
        print("No students found for given branch/year.")
        return

    total_students = len(students)
    avg_marks = sum(s["Final_Marks"] for s in students) / total_students
    highest = max(students, key=lambda x: x["Final_Marks"])
    lowest = min(students, key=lambda x: x["Final_Marks"])
    grades = {"A": 0, "B": 0, "C": 0, "D": 0}
    for s in students:
        marks = s["Final_Marks"]
        if marks >= 75:
            grades["A"] += 1
        elif marks >= 60:
            grades["B"] += 1
        elif marks >= 40:
            grades["C"] += 1
        else:
            grades["D"] += 1
    print("\n--- Report ---")
    print(f"Branch: {branch}, Year: {year}")
    print(f"Total Students: {total_students}")
    print(f"Average Marks: {avg_marks:.2f}")
    print(f"Highest Scorer: {highest['Name']} ({highest['Final_Marks']})")
    print(f"Lowest Scorer: {lowest['Name']} ({lowest['Final_Marks']})")
    print("Grade Distribution:", grades)
    export = input("Export report to CSV? (Y/N): ").strip().upper()
    if export == "Y":
        filename = f"report_{branch}_{year}.csv"
        with open(filename, "w", newline="") as file:
            fieldnames = ["Roll.No", "Name", "Branch", "Year", "Gender", "Age",
                          "Attendance_%", "Mid_Marks", "Mid2_Marks", "Quiz_Marks", "Final_Marks"]
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(students)
        print(f"Report exported to {filename}")
def bulk_import():
    file_path = input("Enter the path of the CSV file to import: ").strip()

    if not os.path.exists(file_path):
        print("File not found. Please check the path.")
        return

    imported_count = 0
    skipped_count = 0
    errors = []

    with open(file_path, "r") as infile, open(CSV_FILE, "a", newline="") as outfile:
        reader = csv.DictReader(infile)
        writer = csv.writer(outfile)

        # Get existing roll numbers to prevent duplicates
        existing_rolls = set()
        with open(CSV_FILE, "r") as f:
            existing_reader = csv.DictReader(f)
            for row in existing_reader:
                existing_rolls.add(int(row["Roll.No"]))

        for i, row in enumerate(reader, start=2):  # start=2 because line 1 is header
            try:
                roll_no = int(row["Roll.No"])
                if roll_no in existing_rolls:
                    errors.append((i, "Duplicate Roll.No"))
                    skipped_count += 1
                    continue

                name = row["Name"].strip()
                branch = row["Branch"].strip()
                year = row["Year"].strip()
                gender = row["Gender"].strip().upper()
                age = int(row["Age"])
                attendance = float(row["Attendance_%"])
                mid1 = float(row["Mid1_Marks"])
                mid2 = float(row["Mid2_Marks"])
                quiz = float(row["Quiz_Marks"])
                final = float(row["Final_Marks"])

                if not (0 <= attendance <= 100):
                    errors.append((i, "Invalid Attendance"))
                    skipped_count += 1
                    continue

                # Add student to master CSV
                writer.writerow([roll_no, name, branch, year, gender, age,
                                 attendance, mid1, mid2, quiz, final])
                existing_rolls.add(roll_no)
                imported_count += 1

            except Exception as e:
                errors.append((i, str(e)))
                skipped_count += 1

    # Save errors to import_errors.csv
    if errors:
        error_file = os.path.join(os.path.dirname(CSV_FILE), "import_errors.csv")
        with open(error_file, "w", newline="") as ef:
            ew = csv.writer(ef)
            ew.writerow(["Line", "Error"])
            ew.writerows(errors)
        print(f"Errors logged to {error_file}")

    print(f"Bulk Import Completed: {imported_count} records imported, {skipped_count} skipped.")
if __name__ == "__main__":
    while True:
        print("\n--- Student Management ---")
        print("1. Add Student (UC1)")
        print("2. Search Student (UC2)")
        print("3. Update Student (UC3)")
        print("4. Delete Student (UC4)")
        print("5. Generate Report (UC5)")
        print("6. Bulk Import (UC6)")
        print("7. Exit")
        choice = input("Enter choice: ")

        if choice == "1":
            add_student()
        elif choice == "2":
            search_student()
        elif choice == "3":
            update_student()
        elif choice == "4":
            delete_student()
        elif choice == "5":
            generate_report()
        elif choice == "6":
            bulk_import()
        elif choice == "7":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Try again.")